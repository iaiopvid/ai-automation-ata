import { Client } from '@notionhq/client';
const { markdownToBlocks } = require('@tryfabric/martian');

// Inicializa o cliente do Notion com a chave de integra칞칚o
let notion;

// Verifica se a chave de API est치 definida
if (!process.env.NOTION_API_KEY) {
  console.warn('[Notion Service] NOTION_API_KEY n칚o est치 definida nas vari치veis de ambiente');
} else {
  notion = new Client({ auth: process.env.NOTION_API_KEY });
}

/**
 * Cria uma p치gina no Notion
 * @param {string} parentId - ID do banco de dados pai
 * @param {string} title - T칤tulo da p치gina
 * @param {Object} properties - Propriedades adicionais da p치gina
 * @param {Array} children - Blocos filhos da p치gina
 * @returns {Promise<Object>} - P치gina criada
 * @throws {Error} Lan칞a erro se par칙metros forem inv치lidos ou se a cria칞칚o falhar
 */
export async function createNotionPage(parentId, title, markdownContent) {
  // Verifica se o cliente do Notion est치 inicializado
  if (!notion) {
    console.warn('Cliente do Notion n칚o inicializado. NOTION_API_KEY n칚o est치 definida. A opera칞칚o ser치 ignorada.');
    return null;
  }

  // Valida칞칚o de campos obrigat칩rios
  if (!parentId || !title) {
    throw new Error('Campos obrigat칩rios ausentes: parentId e title.');
  }

  // Valida칞칚o do ID do Notion
  if (!validateNotionId(parentId)) {
    throw new Error('parentId inv치lido.');
  }

  const blocos = markdownToBlocks(markdownContent, {
    // Op칞칫es opcionais: Ative callouts com emojis (ex: > 游닂 Note: Texto)
    enableEmojiCallouts: true,
    // Desabilite truncamento para limites do Notion (pode causar erros se o conte칰do for muito grande)
    notionLimits: { truncate: false }
  });

  try {
    // Formata os blocos de conte칰do
    // const formattedChildren = formatContentBlocks(children);

    // Cria a estrutura da p치gina
    const pageData = {
      parent: { page_id: parentId },
      properties: {
        title: {
          title: [
            {
              text: {
                content: title,
              },
            },
          ],
        },
      },
      children: blocos,
    };

    // Cria a p치gina no Notion
    const response = await notion.pages.create(pageData);
    
    console.log('P치gina criada com sucesso:', response.id);
    return response;
    
  } catch (error) {
    console.error('[Notion Error] Falha ao criar p치gina no Notion:', error.message || error);
    
    // Re-throw o erro para que possa ser tratado pelo c칩digo que chama a fun칞칚o
    throw new Error(`Falha ao criar p치gina no Notion: ${error.message || error}`);
  }
}

/**
 * Gera um arquivo JSON compat칤vel com o Notion para importa칞칚o
 * @param {string} parentId - ID do banco de dados pai
 * @param {string} title - T칤tulo da p치gina
 * @param {Object} properties - Propriedades adicionais da p치gina
 * @param {Array} children - Blocos filhos da p치gina
 * @returns {Object} - Objeto formatado para importa칞칚o no Notion
 * @throws {Error} Lan칞a erro se par칙metros forem inv치lidos
 */
export function generateNotionFile(parentId, title, properties = {}, children = []) {
  // Valida칞칚o de campos obrigat칩rios
  if (!parentId || !title) {
    throw new Error('Campos obrigat칩rios ausentes: parentId e title.');
  }

  // Valida칞칚o do ID do Notion
  if (!validateNotionId(parentId)) {
    throw new Error('ID do banco de dados inv치lido.');
  }

  // Formata os blocos de conte칰do
  const formattedChildren = formatContentBlocks(children);

  // Estrutura base do arquivo JSON para importa칞칚o no Notion
  const notionFile = {
    parent: { database_id: parentId },
    properties: {
      Name: {
        title: [
          {
            text: {
              content: title,
            },
          },
        ],
      },
      ...properties,
    },
    children: formattedChildren,
  };

  return notionFile;
}

/**
 * Valida se um ID do Notion 칠 v치lido
 * @param {string} id - ID a ser validado
 * @returns {boolean} - True se v치lido, false caso contr치rio
 * @throws {Error} Lan칞a erro se o ID for inv치lido
 */
export function validateNotionId(id) {
  // Verifica se o ID foi fornecido e 칠 uma string
  if (!id || typeof id !== 'string') {
    return false;
  }

  // Remove h칤fens para normalizar o ID
  const normalizedId = id.replace(/-/g, '');
  
  // IDs do Notion geralmente t칡m 32 caracteres hexadecimais
  const hexRegex = /^[a-f0-9]{32}$/i;
  
  return hexRegex.test(normalizedId);
}

/**
 * Formata blocos de conte칰do para uma p치gina do Notion
 * @param {Array} contentBlocks - Array de blocos de conte칰do
 * @returns {Array} - Blocos formatados para o Notion
 */
export function formatContentBlocks(contentBlocks = []) {
  // Verifica se contentBlocks 칠 um array
  if (!Array.isArray(contentBlocks)) {
    console.warn('contentBlocks deve ser um array. Convertendo para array vazio.');
    return [];
  }

  return contentBlocks.map((block, index) => {
    try {
      // Se o bloco j치 estiver no formato do Notion, retorna como est치
      if (block && typeof block === 'object' && block.object && block.type) {
        return block;
      }
      
      // Caso contr치rio, tenta converter texto simples em par치grafo
      if (typeof block === 'string' && block.trim() !== '') {
        return {
          object: 'block',
          type: 'paragraph',
          paragraph: {
            rich_text: [
              {
                type: 'text',
                text: {
                  content: block,
                },
              },
            ],
          },
        };
      }
      
      // Se for um objeto mas n칚o no formato correto, tenta extrair texto
      if (typeof block === 'object' && block !== null) {
        const textContent = block.text || block.content || JSON.stringify(block);
        return {
          object: 'block',
          type: 'paragraph',
          paragraph: {
            rich_text: [
              {
                type: 'text',
                text: {
                  content: textContent,
                },
              },
            ],
          },
        };
      }
      
      // Para outros tipos, converte para string
      return {
        object: 'block',
        type: 'paragraph',
        paragraph: {
          rich_text: [
            {
              type: 'text',
              text: {
                content: String(block),
              },
            },
          ],
        },
      };
      
    } catch (error) {
      console.warn(`Erro ao formatar bloco ${index}:`, error.message);
      // Retorna um bloco de par치grafo vazio em caso de erro
      return {
        object: 'block',
        type: 'paragraph',
        paragraph: {
          rich_text: [
            {
              type: 'text',
              text: {
                content: `[Erro ao processar bloco ${index}]`,
              },
            },
          ],
        },
      };
    }
  }).filter(block => block !== null && block !== undefined);
}

/**
 * Fun칞칚o auxiliar para criar diferentes tipos de blocos
 * @param {string} type - Tipo do bloco (paragraph, heading_1, heading_2, etc.)
 * @param {string} content - Conte칰do do bloco
 * @param {Object} options - Op칞칫es adicionais (cor, formata칞칚o, etc.)
 * @returns {Object} - Bloco formatado para o Notion
 */
export function createNotionBlock(type = 'paragraph', content = '', options = {}) {
  const baseBlock = {
    object: 'block',
    type: type,
  };

  // Configura칞칫es espec칤ficas para cada tipo de bloco
  switch (type) {
    case 'paragraph':
    case 'heading_1':
    case 'heading_2':
    case 'heading_3':
      baseBlock[type] = {
        rich_text: [
          {
            type: 'text',
            text: {
              content: content,
            },
            annotations: {
              bold: options.bold || false,
              italic: options.italic || false,
              strikethrough: options.strikethrough || false,
              underline: options.underline || false,
              code: options.code || false,
              color: options.color || 'default',
            },
          },
        ],
      };
      break;
      
    case 'bulleted_list_item':
    case 'numbered_list_item':
      baseBlock[type] = {
        rich_text: [
          {
            type: 'text',
            text: {
              content: content,
            },
          },
        ],
      };
      break;
      
    case 'code':
      baseBlock[type] = {
        rich_text: [
          {
            type: 'text',
            text: {
              content: content,
            },
          },
        ],
        language: options.language || 'javascript',
      };
      break;
      
    default:
      // Para tipos n칚o suportados, cria um par치grafo
      baseBlock.type = 'paragraph';
      baseBlock.paragraph = {
        rich_text: [
          {
            type: 'text',
            text: {
              content: content,
            },
          },
        ],
      };
  }

  return baseBlock;
}
